name: Release the Data Delivery System CLI

on:
  push:
    tags:
      - 'v*' #if a push with a version tag like v0.0.2 is recorded, trigger release and build

jobs:

  ddsclirelease:
    name: Release DDS CLI
    runs-on: [ubuntu-latest]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
            ${{ github.event.head_commit.message }}
        draft: true   # change to false for production
        prerelease: false


  ddsclipypi:
    name: Release DDS CLI on PyPi
    needs: ddsclirelease
    runs-on: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: 'x64'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        pip install -r requirements.txt
    - name: Build binary wheel and source tarball
      id: build_wheel
      shell: bash
      run: |
        python -m build --sdist --wheel --outdir dist/
        wheel=$(find ./dist -name "*.whl")
        wheelbase=$(basename $(find ./dist -name "*.whl"))
        echo ::set-output name=wheel::$wheel
        echo ::set-output name=wheelbase::$wheelbase
    - name: Publish to Python Package Index
      if: github.repository == 'ScilifelabDataCentre/dds_cli'
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
    - name: Upload Wheel
      id: upload-wheel
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.ddsclirelease.outputs.upload_url }}
        asset_path: ${{ steps.build_wheel.outputs.wheel }}
        asset_name: ${{ steps.build_wheel.outputs.wheelbase }}
        asset_content_type: application/x-wheel+zip

  ddsclibinaries:
    name: Build binary packages for the DDS CLI
    needs: ddsclirelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: MacOs_x86_64
            CMD_BUILD: pyinstaller -F -c -n  dds_cli_macos_x86_64.exe -i resources/scilifelab.icns  --exclude-module=tests  --target-arch x86_64 --log-level INFO dds_cli/__init__.py
            OUT_FILE_NAME: dds_cli_macos_x86_64.exe
            ASSET_MIME: application/x-elf
          #- os: macos-latest  #No virtual environment for this yet
          #  TARGET: MacOs_arm64
          #  CMD_BUILD: pyinstaller -F -c -n dds_cli_macos_arm64.exe -i resources/scilifelab.icns --exclude-module=tests --target-arch arm64 --log-level INFO dds_cli/__init__.py
          #  OUT_FILE_NAME: dds_cli_macos_arm64.exe
          #  ASSET_MIME: application/x-elf
          - os: windows-latest
            TARGET: Windows_x86_64
            CMD_BUILD: PyInstaller -F -c -n dds_cli_win_x86_64.exe -i resources/scilifelab.ico  --exclude-module=tests --log-level INFO dds_cli/__init__.py
            OUT_FILE_NAME: dds_cli_win_x86_64.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
    steps:
    - uses: actions/checkout@v2
    - name: Python 3.9 setup
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        # architecture: 'x64'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyInstaller
        pip install -r requirements.txt
    - name: Building with PyInstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.ddsclirelease.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME}}


